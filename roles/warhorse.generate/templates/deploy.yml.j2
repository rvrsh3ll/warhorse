---
- name: Deploy Terraform
  hosts: localhost
  gather_facts: true
  connection: local
  no_log: true
  tasks:
  - name: Start
    set_fact:
      start_time: "{% raw %}{{ ansible_date_time.iso8601[:19] }}{% endraw %}"
  vars: 
    deploy: true
  roles:
    - { role: terraform }

- name: Refresh Inventory & unlock SSH Key
  hosts: localhost
  gather_facts: false
  connection: local
  tasks:
  - name: Unlock SSH key "{% raw %}{{ ansible_ssh_private_key_file }}{% endraw %}"
    expect:
      command: ssh-add "{% raw %}{{ ansible_ssh_private_key_file }}{% endraw %}"
      responses:
        passphrase: "{% raw %}{{ ssh_passphrase }}{% endraw %}"
    delegate_to: 127.0.0.1
    become: no
    changed_when: no
    no_log: false
  - name: Gathering facts
    setup:
  - meta: refresh_inventory
  - name: Wait for system to become reachable again
    wait_for_connection:
        delay: 10
        timeout: 300

- name: Apt Ready
  gather_facts: yes
  hosts: warhorse
  connection: ssh
  become: true
  no_log: true
  vars: 
    deploy: true
  tasks:
  - name: Apt for sure
    apt: update_cache=yes
    register: apt_status
    until: apt_status is success
    delay: 10
    retries: 10 

{% for vm in warhorse.vm %}  
{% if loop.first %}
- name: Install Roles
  gather_facts: yes
  hosts: warhorse
  connection: ssh
  become: true
  no_log: true
  vars: 
    deploy: true
  roles:
{% if warhorse.general.snapshots is undefined or false %}
    - { role: weareinteractive.users }
    - { role: geerlingguy.pip }
    - { role: geerlingguy.docker }
    - { role: warhorse.os }
    - { role: geerlingguy.ntp }
    - { role: geerlingguy.security }
    - { role: viasite-ansible.zsh, zsh_shared: yes}
{% endif %}
{% if warhorse.general.snapshots is defined and true %}
    - { role: weareinteractive.users }
    - { role: warhorse.os }
    - { role: viasite-ansible.zsh, zsh_shared: yes}
{% endif %}
{% if vm.backup is defined %}
    - { role: arillso.restic }
{% endif %}
{% endif %}
{% endfor %}
{% for vm in warhorse.vm %}

- name: Install Modules
  gather_facts: True
  hosts: {{ vm.name }}
  connection: ssh
  become: true
  no_log: true
  vars: 
    deploy: true
  roles:
{% if warhorse.vpn.tailscale is defined and vm.tailscale is defined %}
    - { role: artis3n.tailscale }
{% endif %}
{% if vm.golang is defined %}
    - { role: gantsign.golang }
{% endif %}
{% if vm.http_proxy is defined and vm.http_proxy == "traefik" %}
    - { role: warhorse.traefik_docker }
{% endif %}
{% if vm.http_proxy is defined and vm.http_proxy == "nginx" %}
    - { role: warhorse.nginx_docker }
{% endif %}
{% if vm.cobaltstrike is defined %}
    - { role: warhorse.cobaltstrike_docker }
{% endif %}
{% if vm.gophish is defined %}
    - { role: warhorse.gophish_docker }
{% endif %}
{% if vm.mythic is defined %}
    - { role: t94j0.mythic }
    - { role: warhorse.swag_docker }
{% endif %}
{% if vm.neo4j is defined %}
    - { role: warhorse.neo4j_docker }
{% endif %}
{% if vm.syncthing is defined %}
    - { role: warhorse.syncthing_docker }
{% endif %}
{% if vm.tailscale is defined %}
    - { role: warhorse.tailscale }
{% endif %}
{% if vm.dashy is defined %}
    - { role: warhorse.dashy_docker }
{% endif %}
{% if vm.evilginx2 is defined %}
    - { role: warhorse.evilginx2_docker }
{% endif %}
{% if vm.mitmproxy is defined %}
    - { role: warhorse.mitmproxy_docker }
{% endif %}
{% if vm.nighthawk is defined %}
    - { role: warhorse.nighthawk_docker }
{% endif %}
{% endfor %}

{% if warhorse.general.deployment_txt is undefined or warhorse.general.deployment_txt is true %}
- name: Deployment Extras
  gather_facts: yes
  hosts: warhorse
  connection: ssh
  become: true
  no_log: true
  vars: 
    deploy: true
  roles:
    - { role: deployment }
{% else %}
- name: Deployment Extras
  gather_facts: yes
  hosts: warhorse
  connection: ssh
  become: true
  no_log: true
  vars: 
    deploy: true
  roles:
{% if warhorse.notification.email is defined %}
    - { role: warhorse.notification }
{% endif %}
{% endif %}

- name: Run Time
  hosts: localhost
  gather_facts: true
  connection: local
  tasks:
  - name: force update of current timestamp
    setup: filter='ansible_date_time'
  - name: Get runtime
    set_fact:
      runtime: "{% raw %}{{ ((ansible_date_time.iso8601[:19] | to_datetime('%Y-%m-%dT%H:%M:%S')) - (start_time | to_datetime('%Y-%m-%dT%H:%M:%S'))) }}{% endraw %}"
  - debug:
      msg: "Playbook Runtime {% raw %}{{ runtime }}{% endraw %}"